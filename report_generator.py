"""
Report Generator Module
Generate PDF reports for DPR analysis results
"""

import os
import logging
from datetime import datetime
from io import BytesIO
import tempfile

# Try to import PDF generation libraries
try:
    from reportlab.lib.pagesizes import letter, A4
    from reportlab.lib.styles import getSampleStyleSheet, ParagraphStyle
    from reportlab.lib.units import inch
    from reportlab.lib.colors import HexColor, black, white, red, orange, green
    from reportlab.platypus import SimpleDocTemplate, Paragraph, Spacer, Table, TableStyle, PageBreak
    from reportlab.lib.enums import TA_LEFT, TA_CENTER, TA_JUSTIFY
    REPORTLAB_AVAILABLE = True
except ImportError:
    REPORTLAB_AVAILABLE = False

logger = logging.getLogger(__name__)

class ReportGenerator:
    def __init__(self):
        self.page_size = A4
        self.margin = 0.75 * inch
        
        if REPORTLAB_AVAILABLE:
            self.colors = {
                'primary': HexColor('#1f3b5c'),
                'secondary': HexColor('#2a7a8c'),
                'success': HexColor('#22c55e'),
                'warning': HexColor('#f59e0b'),
                'danger': HexColor('#ef4444'),
                'light': HexColor('#f8fafc'),
                'dark': HexColor('#1e293b')
            }
            self.styles = self._create_styles()
        
        logger.info(f"Report Generator initialized (ReportLab available: {REPORTLAB_AVAILABLE})")

    def generate_pdf_report(self, analysis_data):
        """Generate comprehensive PDF report"""
        if REPORTLAB_AVAILABLE:
            return self._generate_pdf_with_reportlab(analysis_data)
        else:
            return self._generate_text_report(analysis_data)

    def _generate_pdf_with_reportlab(self, analysis_data):
        """Generate PDF using ReportLab"""
        buffer = BytesIO()
        
        doc = SimpleDocDocument(
            buffer,
            pagesize=self.page_size,
            rightMargin=self.margin,
            leftMargin=self.margin,
            topMargin=self.margin,
            bottomMargin=self.margin
        )
        
        story = []
        
        # Title page
        story.extend(self._create_title_page(analysis_data))
        story.append(PageBreak())
        
        # Executive summary
        story.extend(self._create_executive_summary(analysis_data))
        story.append(PageBreak())
        
        # Section analysis
        story.extend(self._create_section_analysis(analysis_data))
        story.append(PageBreak())
        
        # Risk assessment
        story.extend(self._create_risk_assessment(analysis_data))
        story.append(PageBreak())
        
        # Recommendations
        story.extend(self._create_recommendations(analysis_data))
        
        # Build PDF
        doc.build(story)
        buffer.seek(0)
        return buffer

    def _create_styles(self):
        """Create custom paragraph styles"""
        styles = getSampleStyleSheet()
        
        # Title style
        styles.add(ParagraphStyle(
            name='CustomTitle',
            parent=styles['Title'],
            fontSize=24,
            spaceAfter=30,
            textColor=self.colors['primary'],
            alignment=TA_CENTER,
            fontName='Helvetica-Bold'
        ))
        
        # Heading style
        styles.add(ParagraphStyle(
            name='CustomHeading1',
            parent=styles['Heading1'],
            fontSize=16,
            spaceAfter=12,
            spaceBefore=20,
            textColor=self.colors['primary'],
            fontName='Helvetica-Bold'
        ))
        
        # Body style
        styles.add(ParagraphStyle(
            name='CustomBody',
            parent=styles['Normal'],
            fontSize=11,
            spaceAfter=6,
            alignment=TA_JUSTIFY,
            fontName='Helvetica'
        ))
        
        return styles

    def _create_title_page(self, analysis_data):
        """Create report title page"""
        content = []
        
        # Main title
        title = "DPR Quality Assessment Report"
        content.append(Paragraph(title, self.styles['CustomTitle']))
        content.append(Spacer(1, 0.5*inch))
        
        # Subtitle
        subtitle = "Ministry of Development of North Eastern Region"
        content.append(Paragraph(subtitle, self.styles['CustomBody']))
        content.append(Spacer(1, 0.3*inch))
        
        # Project info
        file_info = analysis_data.get('file_info', {})
        project_name = file_info.get('filename', 'Unknown Project')
        analysis_date = file_info.get('uploaded_at', datetime.now().isoformat())
        
        project_info = f"""
        <b>Project:</b> {project_name}<br/>
        <b>Analysis Date:</b> {analysis_date[:10]}<br/>
        <b>Generated By:</b> AI-Powered DPR Assessment System
        """
        
        content.append(Paragraph(project_info, self.styles['CustomBody']))
        content.append(Spacer(1, 1*inch))
        
        return content

    def _create_executive_summary(self, analysis_data):
        """Create executive summary section"""
        content = []
        
        content.append(Paragraph("Executive Summary", self.styles['CustomHeading1']))
        
        analysis = analysis_data.get('analysis', {})
        risks = analysis_data.get('risks', {})
        
        overall_score = analysis.get('overall_score', 0)
        risk_level = risks.get('overall_risk', {}).get('level', 'Unknown')
        completeness = analysis.get('completeness_percentage', 0)
        
        summary_text = f"""
        This comprehensive analysis evaluates the submitted Detailed Project Report (DPR) 
        against MDoNER guidelines using advanced Natural Language Processing and Machine Learning algorithms.
        
        <b>Key Findings:</b>
        <br/>• Overall Quality Score: {overall_score}/100
        <br/>• Risk Assessment Level: {risk_level}
        <br/>• Completeness: {completeness}%
        <br/>• Sections Analyzed: {analysis.get('sections_found', 0)}/{analysis.get('total_sections', 10)}
        
        The analysis identifies specific areas for improvement and provides actionable recommendations
        to enhance the project proposal's quality and approval probability.
        """
        
        content.append(Paragraph(summary_text, self.styles['CustomBody']))
        content.append(Spacer(1, 0.3*inch))
        
        return content

    def _create_section_analysis(self, analysis_data):
        """Create section-wise analysis"""
        content = []
        
        content.append(Paragraph("Section-wise Analysis", self.styles['CustomHeading1']))
        
        analysis = analysis_data.get('analysis', {})
        section_analyses = analysis.get('section_analyses', {})
        
        # Create table data
        table_data = [['Section Name', 'Score', 'Completeness', 'Quality', 'Status']]
        
        for section_name, section_data in section_analyses.items():
            score = section_data.get('score', 0)
            completeness = section_data.get('completeness', 0)
            quality = section_data.get('quality', 0)
            
            if score >= 75:
                status = 'Good'
            elif score >= 60:
                status = 'Satisfactory'
            else:
                status = 'Needs Improvement'
            
            table_data.append([
                section_name,
                f"{score}/100",
                f"{completeness}%",
                f"{quality}/100",
                status
            ])
        
        # Create table
        table = Table(table_data)
        table.setStyle(TableStyle([
            ('BACKGROUND', (0, 0), (-1, 0), self.colors['primary']),
            ('TEXTCOLOR', (0, 0), (-1, 0), white),
            ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
            ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
            ('FONTSIZE', (0, 0), (-1, 0), 12),
            ('BOTTOMPADDING', (0, 0), (-1, 0), 12),
            ('BACKGROUND', (0, 1), (-1, -1), self.colors['light']),
            ('GRID', (0, 0), (-1, -1), 1, black)
        ]))
        
        content.append(table)
        content.append(Spacer(1, 0.3*inch))
        
        return content

    def _create_risk_assessment(self, analysis_data):
        """Create risk assessment section"""
        content = []
        
        content.append(Paragraph("Risk Assessment", self.styles['CustomHeading1']))
        
        risks = analysis_data.get('risks', {})
        risk_predictions = risks.get('risk_predictions', {})
        overall_risk = risks.get('overall_risk', {})
        
        # Overall risk summary
        risk_summary = f"""
        <b>Overall Risk Level:</b> {overall_risk.get('level', 'Unknown')}<br/>
        <b>Risk Score:</b> {overall_risk.get('score', 0)}/100<br/>
        <b>High Priority Risks:</b> {overall_risk.get('high_risk_count', 0)}<br/>
        <b>Medium Priority Risks:</b> {overall_risk.get('medium_risk_count', 0)}<br/>
        <b>Low Priority Risks:</b> {overall_risk.get('low_risk_count', 0)}
        """
        
        content.append(Paragraph(risk_summary, self.styles['CustomBody']))
        content.append(Spacer(1, 0.2*inch))
        
        # Risk details table
        table_data = [['Risk Category', 'Probability', 'Level', 'Severity']]
        
        for risk_name, risk_data in risk_predictions.items():
            probability = risk_data.get('probability', 0)
            level = risk_data.get('level', 'Unknown')
            severity = risk_data.get('severity', 'Unknown')
            
            table_data.append([
                risk_name,
                f"{probability}%",
                level,
                severity
            ])
        
        if len(table_data) > 1:
            risk_table = Table(table_data)
            risk_table.setStyle(TableStyle([
                ('BACKGROUND', (0, 0), (-1, 0), self.colors['warning']),
                ('TEXTCOLOR', (0, 0), (-1, 0), white),
                ('ALIGN', (0, 0), (-1, -1), 'CENTER'),
                ('FONTNAME', (0, 0), (-1, 0), 'Helvetica-Bold'),
                ('GRID', (0, 0), (-1, -1), 1, black)
            ]))
            
            content.append(risk_table)
        
        content.append(Spacer(1, 0.3*inch))
        
        return content

    def _create_recommendations(self, analysis_data):
        """Create recommendations section"""
        content = []
        
        content.append(Paragraph("Improvement Recommendations", self.styles['CustomHeading1']))
        
        recommendations = analysis_data.get('recommendations', [])
        
        if recommendations:
            for i, rec in enumerate(recommendations, 1):
                priority = rec.get('priority', 'Medium')
                category = rec.get('category', 'General')
                recommendation = rec.get('recommendation', '')
                
                rec_text = f"""
                <b>{i}. [{priority} Priority] {category}</b><br/>
                {recommendation}
                """
                
                content.append(Paragraph(rec_text, self.styles['CustomBody']))
                content.append(Spacer(1, 0.15*inch))
        else:
            content.append(Paragraph("No specific recommendations generated.", self.styles['CustomBody']))
        
        # Footer
        footer_text = """
        <br/><br/>
        <i>This report was generated by the AI-Powered DPR Quality Assessment System 
        developed for the Ministry of Development of North Eastern Region (MDoNER).
        The system uses advanced Natural Language Processing and Machine Learning 
        techniques to evaluate project proposals against established guidelines.</i>
        """
        
        content.append(Paragraph(footer_text, self.styles['CustomBody']))
        
        return content

    def _generate_text_report(self, analysis_data):
        """Generate text report when ReportLab not available"""
        logger.warning("Generating text report as ReportLab not available")
        
        file_info = analysis_data.get('file_info', {})
        analysis = analysis_data.get('analysis', {})
        risks = analysis_data.get('risks', {})
        recommendations = analysis_data.get('recommendations', [])
        
        project_name = file_info.get('filename', 'Unknown Project')
        analysis_date = file_info.get('uploaded_at', datetime.now().isoformat())[:10]
        overall_score = analysis.get('overall_score', 0)
        risk_level = risks.get('overall_risk', {}).get('level', 'Unknown')
        
        report_text = f"""
MDoNER DPR QUALITY ASSESSMENT REPORT
===================================

Project: {project_name}
Analysis Date: {analysis_date}
Generated By: AI-Powered DPR Assessment System
Generated On: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}

EXECUTIVE SUMMARY
----------------
Overall Quality Score: {overall_score}/100
Risk Assessment Level: {risk_level}
Completeness: {analysis.get('completeness_percentage', 0)}%
Sections Analyzed: {analysis.get('sections_found', 0)}/{analysis.get('total_sections', 10)}

SECTION ANALYSIS
---------------"""
        
        section_analyses = analysis.get('section_analyses', {})
        for section_name, section_data in section_analyses.items():
            score = section_data.get('score', 0)
            completeness = section_data.get('completeness', 0)
            status = 'Good' if score >= 75 else 'Satisfactory' if score >= 60 else 'Needs Improvement'
            
            report_text += f"""
{section_name}: {score}/100 ({status})
  Completeness: {completeness}%"""
        
        report_text += """

RISK ASSESSMENT
--------------"""
        
        overall_risk = risks.get('overall_risk', {})
        report_text += f"""
Overall Risk Level: {overall_risk.get('level', 'Unknown')}
High Priority Risks: {overall_risk.get('high_risk_count', 0)}
Medium Priority Risks: {overall_risk.get('medium_risk_count', 0)}
Low Priority Risks: {overall_risk.get('low_risk_count', 0)}

Risk Details:"""
        
        risk_predictions = risks.get('risk_predictions', {})
        for risk_name, risk_data in risk_predictions.items():
            probability = risk_data.get('probability', 0)
            level = risk_data.get('level', 'Unknown')
            report_text += f"""
{risk_name}: {probability}% ({level} Risk)"""
        
        report_text += """

RECOMMENDATIONS
--------------"""
        
        if recommendations:
            for i, rec in enumerate(recommendations, 1):
                priority = rec.get('priority', 'Medium')
                category = rec.get('category', 'General')
                recommendation = rec.get('recommendation', '')
                
                report_text += f"""
{i}. [{priority}] {category}
   {recommendation}"""
        else:
            report_text += """
No specific recommendations generated."""
        
        report_text += """

QUALITY METRICS
--------------"""
        
        quality_scores = analysis.get('quality_scores', {})
        for metric_name, score in quality_scores.items():
            metric_display = metric_name.replace('_', ' ').title()
            report_text += f"""
{metric_display}: {score}/100"""
        
        report_text += """

DOCUMENT STATISTICS
------------------"""
        
        doc_stats = analysis.get('document_stats', {})
        report_text += f"""
Word Count: {doc_stats.get('word_count', 'Unknown')}
Sentence Count: {doc_stats.get('sentence_count', 'Unknown')}
Readability Score: {doc_stats.get('readability', 'Unknown')}

========================================
This report was generated by the MDoNER DPR Assessment System.
For detailed interactive analysis, please use the web dashboard.
========================================
        """
        
        # Convert to BytesIO for consistent return type
        buffer = BytesIO()
        buffer.write(report_text.encode('utf-8'))
        buffer.seek(0)
        
        return buffer

    def save_report_to_file(self, analysis_data, filepath):
        """Save report to file"""
        try:
            report_buffer = self.generate_pdf_report(analysis_data)
            
            with open(filepath, 'wb') as f:
                f.write(report_buffer.read())
            
            logger.info(f"Report saved to: {filepath}")
            return True
            
        except Exception as e:
            logger.error(f"Error saving report: {str(e)}")
            return False
